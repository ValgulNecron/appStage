name: MSBuild

on: 
  workflow_dispatch:
    inputs:
      version:
        description: 'definit la version de build'     
        required: true
        default: '0.1'
        
env:
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    # permet de rajouter msbuild sur l'environement de build
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1
    # recupere les packet nuget necesaire au build
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
      
    # sonar 
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu' # Alternative distribution options are available.
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"ValgulNecron_appStage" /o:"valgulnecron" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        
    # upload un artifact de la build sur le workflow
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with: 
          name: build
          path: ${{env.SOLUTION_FILE_PATH}}\CartesAcces\bin\Release\
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with: 
          name: data
          path: ${{env.SOLUTION_FILE_PATH}}\data
  release:
    # s'execute sur la derniere version des machine ubuntu de github
    runs-on: ubuntu-latest
    needs: build
    steps:
      # telecharge l'arifact build precedement 
      - name: Download artifact
        uses: actions/download-artifact@v3
        with: 
          name: build
      - name: Download artifact
        uses: actions/download-artifact@v3
        with: 
          name: data
      # compresse l'arifact dans un fichier .zip 
      - name: Zip File
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: 'release.zip'
          exclusions: '*.git* /*node_modules/* .editorconfig'
      # creer une release sur le depot git 
      - name: Create Release
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.event.inputs.version }} 
          release_name: Release ${{ github.event.inputs.version }} 
          body: |
            autogenerated release
          draft: false
          prerelease: false
      # upload l'artifact ziper sur la release cr√©er 
      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: Release-${{ github.event.inputs.version }}.zip
          asset_content_type: application/zip
