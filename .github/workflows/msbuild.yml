name: MSBuild


# condition sur la qu'elle le workflow s'execute 
on: 
  # a la demande de l'utilisateur
  workflow_dispatch:
    # avec comme entrer la version qui est obligatoire et qui a comme version par default "latest"
    inputs:
      version:
        description: 'definit la version de build'     
        required: true
        default: '0.1'
# variable d'environement 
env:
  # emplacement de la solution (.sln) relative au projet 
  SOLUTION_FILE_PATH: .
  

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

# liste des jobs qu'effectue ce workflow
jobs:
  build:
    # s'execute sur la derniere version des machine windows de github
    runs-on: windows-latest
    # permet de checkout le projet
    steps:
    - uses: actions/checkout@v3
    # permet de rajouter msbuild sur l'environement de build
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    # recupere les packet nuget necesaire au build
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
    # build la solution
    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
    # upload un artifact de la build sur le workflow
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with: 
          name: build
          path: ${{env.SOLUTION_FILE_PATH}}\CartesAcces\bin\Release\
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with: 
          name: data
          path: ${{env.SOLUTION_FILE_PATH}}\data
  release:
    # s'execute sur la derniere version des machine ubuntu de github
    runs-on: ubuntu-latest
    needs: build
    steps:
      # telecharge l'arifact build precedement 
      - name: Download artifact
        uses: actions/download-artifact@v3
        with: 
          name: build
      - name: Download artifact
        uses: actions/download-artifact@v3
        with: 
          name: data
      # compresse l'arifact dans un fichier .zip 
      - name: Zip File
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: 'release.zip'
          exclusions: '*.git* /*node_modules/* .editorconfig'
      # creer une release sur le depot git 
      - name: Create Release
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.event.inputs.version }} 
          release_name: Release ${{ github.event.inputs.version }} 
          body: |
            autogenerated release
          draft: false
          prerelease: false
      # upload l'artifact ziper sur la release cr√©er 
      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: Release-${{ github.event.inputs.version }}.zip
          asset_content_type: application/zip
